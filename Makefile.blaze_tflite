# Makefile for building blaze_tflite/blaze_detect_live

# Directories
TFLITE_INCLUDE_DIR := ./blaze_tflite/tflite_libs_cpp/include
TFLITE_LIBRARY_DIR := ./blaze_tflite/tflite_libs_cpp/lib
BUILD_DIR := blaze_tflite/build

# Compiler and Flags
CXX := g++
CXXFLAGS := -O3 -pthread
INCFLAGS := -I/usr/include/opencv4 -I$(TFLITE_INCLUDE_DIR) -I./blaze_common -I./blaze_tflite -I..
LDFLAGS := -L. -L$(TFLITE_LIBRARY_DIR) -Wl,-rpath,.
LIBS := -ltensorflowlite -lopencv_core -lopencv_video -lopencv_videoio -lopencv_imgcodecs -lopencv_imgproc -lopencv_highgui -lpthread

# Sources and Objects
COMMON_SRCS := blaze_common/visualization.cpp blaze_common/Config.cpp blaze_common/Base.cpp
TFLITE_SRCS := blaze_tflite/Detector.cpp blaze_tflite/Landmark.cpp blaze_tflite/blaze_detect_live.cpp
SRCS := $(COMMON_SRCS) $(TFLITE_SRCS)
OBJS := $(addprefix $(BUILD_DIR)/, $(notdir $(SRCS:.cpp=.o)))

# Target binary
TARGET := blaze_tflite/blaze_detect_live

# Default rule
all: $(TARGET)

# Clean build directory
clean:
	rm -rf $(BUILD_DIR)/*.o $(TARGET)

# Ensure build directory exists
$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)

# Build object files
$(BUILD_DIR)/%.o: blaze_common/%.cpp | $(BUILD_DIR)
	$(CXX) $(CXXFLAGS) $(INCFLAGS) -c $< -o $@

$(BUILD_DIR)/%.o: blaze_tflite/%.cpp | $(BUILD_DIR)
	$(CXX) $(CXXFLAGS) $(INCFLAGS) -c $< -o $@

# Link all objects into the final executable, using the OBJS variable
$(TARGET): $(OBJS)
	$(CXX) -o $@ $(OBJS) $(LDFLAGS) $(LIBS)

.PHONY: all clean
